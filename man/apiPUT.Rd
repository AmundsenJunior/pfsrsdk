% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/apiPUT.R
\name{apiPUT}
\alias{apiPUT}
\title{apiPUT - Do a PUT to the PFS API.}
\usage{
apiPUT(coreApi, resource = NULL, query = NULL, body = NULL, encode,
  headers = NULL, special = NULL, useVerbose = FALSE, unbox = TRUE,
  valueFlag = FALSE, fullReturn = TRUE)
}
\arguments{
\item{coreApi}{coreApi object with valid jsessionid}

\item{resource}{entity type for PUT}

\item{query}{query string}

\item{body}{body for request}

\item{encode}{encoding to use for request option are "multipart", "form", "json", "raw"}

\item{headers}{headers to be added to \code{httr::PUT}.}

\item{special}{passed to buildUrl for special sdk endpoints}

\item{useVerbose}{use verbose communication for debugging}

\item{unbox}{use autounbox when doing list-to-JSON conversion}

\item{valueFlag}{Tells the PUT if there needs to be a /$value added to the end.}

\item{fullReturn}{Return the entire response object, or just the response content (default TRUE)}
}
\value{
List of length 2, containing \code{content} and \code{response} objects:
\itemize{
 \item{\code{content}} is the HTTP response content.
 \item{\code{response}} is the entire HTTP response. NULL if \code{fullReturn} is FALSE.
}
}
\description{
\code{apiPUT} - Do a PUT to the PFS API.
}
\details{
\code{apiPUT}  Do a PUT to the PFS API.
}
\examples{
\dontrun{
api <- coreAPI("PATH TO JSON FILE")
login <- authBasic(api)
response <- apiPUT(login$coreApi,
  "SAMPLE",
  body,
  "json",
  special = NULL,
  useVerbose = FALSE,
  unbox = TRUE
)
content <- response$content
error <- response$error$message
logOut(login$coreApi)
}
}
\author{
Craig Parman info@ngsanalytics.com

Adam Wheeler adam.wheeler@thermofisher.com

Francisco Marin francisco.marin@thermofisher.com

Scott Russell scott.russell@thermofisher.com
}
